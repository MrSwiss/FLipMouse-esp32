<html>
<head>
    <title>FlipMouse Configuration</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="css/normal.css">
    <link rel="stylesheet" href="css/skeleton.css">
    <link rel="stylesheet" href="css/tabby.css">
    <link rel="stylesheet" href="css/custom.css">
    <link rel="stylesheet" href="css/slider.css">
    <script src="lib/tabby.js"></script>
    <script src="lib/domi18n.js"></script>

    <script src="js/const.js"></script>
    <script src="js/lquery.js"></script>
    <script src="js/wsutil.js"></script>
    <script src="js/arecomm.js"></script>
    <script src="js/wscomm.js"></script>
    <script src="js/flipcomm.js"></script>
    <script src="js/mockcomm.js"></script>
    <script src="js/tabbasic.js"></script>
    <script src="js/tabsip.js"></script>
    <script src="js/tabslot.js"></script>
    <script src="js/tabact.js"></script>
</head>
<body>
<div id="content">
    <div class="row">
        <div>
            <h1 id="mainHeading" tabindex="-1" class="nine columns" i18n>FLipMouse Configuration // FLipMouse Konfiguration</h1>
            <span aria-hidden="true" class="show-mobile headerConnectIndicator green connectedIndicator" style="display: none">&#x2713;</span>
            <span aria-hidden="true" class="show-mobile headerConnectIndicator red disconnectedIndicator">&#x2717;</span>
        </div>
        <div class="three columns hide-mobile showscreenreader">
            <div class="row">
                <label class="seven columns" for="selectSlots" i18n>Select Slot // Slot auswählen</label>
                <div class="five columns text-right connectedIndicator" style="display: none">
                    <span aria-hidden="true" style="color: green">&#x2713;</span>
                    <span aria-hidden="false" class="hidden" i18n>connection status // Verbindungsstatus</span>
                    <span aria-hidden="false" class="show-desktop">connected // verbunden</span>
                </div>
                <div class="five columns text-right disconnectedIndicator">
                    <span aria-hidden="true" style="color: red">&#x2717;</span>
                    <span aria-hidden="false" class="hidden" i18n>connection status // Verbindungsstatus</span>
                    <span aria-hidden="false" class="show-desktop" i18n>not connected // nicht verbunden</span>
                </div>
            </div>
            <select aria-hidden="true" id="selectSlots" class="slot-select row u-full-width" onchange="tabSlot.selectSlot(this)">
            </select>
        </div>
    </div>
    <div class="row hide-mobile" style="margin-bottom: 1.5em"></div>

    <div data-tabs class="row" id="tabMenu" role="menubar" tabindex="-1">
        <div class="three columns hide-mobile showscreenreader"><button role="menuitem" onclick="toTab('#tabBasic')" class="menubutton button-primary" data-tab id="tabBasicBtn" i18n>Basic Setup // Basis-Konfiguration</button></div>
        <div class="three columns hide-mobile showscreenreader"><button role="menuitem" onclick="toTab('#tabPuff')" class="menubutton button-primary" data-tab id="tabPuffBtn" i18n>Sip and Puff // Saug-Blassteuerung</button></div>
        <div class="three columns hide-mobile showscreenreader"><button role="menuitem" onclick="toTab('#tabSlots')" class="menubutton button-primary" data-tab id="tabSlotsBtn" i18n>Slot configuration // Slot-Konfiguration</button></div>
        <div class="three columns hide-mobile showscreenreader"><button role="menuitem" onclick="toTab('#tabActions')" class="menubutton button-primary" data-tab id="tabActionsBtn" i18n>Action configuration // Konfiguration Aktionen</button></div>
        <div class="show-mobile" aria-hidden="true"><button id="toNavLink" onclick="toNav()" class="button button-primary" data-tab i18n>&#x2630; Menu // &#x2630; Menü</button></div>
        <div class="show-mobile" aria-hidden="true"><button id="toNavBackLink" style="display: none" onclick="toNavBack()" class="button button-primary" i18n>&#8592; Back // &#8592; Zurück</button></div>
    </div>
    <div data-tabs-content>
        <div data-tabs-pane class="tabs-pane" id="tabNav">
            <div id="tabNavContainer" class="row"></div>
        </div>
        <div data-tabs-pane class="tabs-pane" id="tabBasic">
            <div tabindex="-1">
                <h2 i18n style="display: none" aria-hidden="false" i18n>Tab one - Basic FlipMouse Setup // Tab eins - FlipMouse Basiskonfiguration</h2>
            </div>
            <div id="basic-SENSITIVITY-single">
                <label for="SENSITIVITY" i18n>Sensitivity: // Sensitivität:</label>
                <a aria-hidden="true" class="u-pull-right" href="javascript:tabBasic.toggleShowXY('SENSITIVITY')" i18n>show x/y separately // zeige x/y getrennt</a>
                <div class="row">
                    <span aria-hidden="true" id="SENSITIVITY_VAL" class="text-center one column">0</span>
                    <input type="range" oninput="tabBasic.basicSliderChanged(event)" onchange="tabBasic.basicSliderChanged(event)"
                           id="SENSITIVITY" min="0" max="255" class="eleven columns">
                </div>
            </div>
            <div id="basic-SENSITIVITY-xy" style="display: none">
                <label for="SENSITIVITY_X" i18n>Horizontal Sensitivity: // Sensitivität horizontal:</label>
                <a aria-hidden="true" class="u-pull-right" href="javascript:tabBasic.toggleShowXY('SENSITIVITY')" i18n>hide separate x/y // zeige  x/y gemeinsam</a>
                <div class="row">
                    <span id="SENSITIVITY_X_VAL" class="text-center one column">0</span>
                    <input type="range" oninput="tabBasic.basicSliderChanged(event)" onchange="tabBasic.basicSliderChanged(event)"
                           id="SENSITIVITY_X" min="0" max="255" class="eleven columns">
                </div>
                <label for="SENSITIVITY_Y" i18n>Vertical Sensitivity: // Sensitivität vertikal:</label>
                <div class="row">
                    <span id="SENSITIVITY_Y_VAL" class="text-center one column">0</span>
                    <input type="range" oninput="tabBasic.basicSliderChanged(event)" onchange="tabBasic.basicSliderChanged(event)"
                           id="SENSITIVITY_Y" min="0" max="255" class="eleven columns">
                </div>
            </div>

            <br/>
            <div class="row">
                <div aria-hidden="true" class="six columns">
                    <div class="relative center-div cursorPosWrapper">
                        <div id="orientationSign" class="back-layer full-height full-width" style="transform: rotate(270deg);">
                            <div class="back-layer" style="top:100%; left: 35%; width: 30%; height: 10%; background-color: black; z-index: 2"></div>
                        </div>
                        <div id="deadZonePos" class="back-layer color-lightcyan"
                             style="top: 40%; left: 40%; height: 20%; width: 20%;"></div>
                        <div class="back-layer"
                             style="left: 50%; height: 100%; border-right-style: solid; border-right-width: thin;"></div>
                        <div class="back-layer"
                             style="top: 50%; width: 100%; border-bottom-style: solid; border-bottom-width: thin;"></div>
                        <button onclick="tabBasic.cursorPosZoomReset();" class="zoombutton" style="top: 55%;" title="Reset Zoom">&#8634;</button>
                        <div id="cursorPosVal" class="back-layer" style="top: 40%;">110</div>
                        <div id="cursorPos" class="back-layer" style="top: 50%; left: 50%;">
                            <div class="back-layer" id="circle"></div>
                        </div>
                    </div>
                </div>
                <div class="five columns">
                    <button onclick="actionAndToggle(flip.calibrate, [], ['#basic-button-calibrate', '#basic-button-calibrating'])">
                        <span i18n id="basic-button-calibrate">Calibrate middle position // Mittelposition kalibrieren</span>
                        <span id="basic-button-calibrating" style="display: none;" i18n>Calibrating... // wird kalibriert...</span>
                    </button>
                    <button onclick="actionAndToggle(flip.rotate, [], ['#basic-button-rotate', '#basic-button-rotating'])">
                        <span i18n id="basic-button-rotate">&#x21bb; Rotate right // &#x21bb; Nach rechts drehen</span>
                        <span id="basic-button-rotating" style="display: none;" i18n>Rotating... // wird gedreht...</span>
                    </button>
                </div>
            </div>

            <br/>
            <div id="basic-DEADZONE-single">
                <label for="DEADZONE">Deadzone:</label>
                <a aria-hidden="true" class="u-pull-right" href="javascript:tabBasic.toggleShowXY('DEADZONE')" i18n>show x/y separately // zeige x/y getrennt</a>
                <div class="row">
                    <span aria-hidden="true" id="DEADZONE_VAL" class="text-center one column">0</span>
                    <input type="range" oninput="tabBasic.basicSliderChanged(event)" onchange="tabBasic.basicSliderChanged(event)"
                           id="DEADZONE" min="0" max="650" class="eleven columns">
                </div>
            </div>
            <div id="basic-DEADZONE-xy" style="display: none">
                <label for="DEADZONE_X">Horizontal Deadzone:</label>
                <a aria-hidden="true" class="u-pull-right" href="javascript:tabBasic.toggleShowXY('DEADZONE')" i18n>hide separate x/y // zeige x/y gemeinsam</a>
                <div class="row">
                    <span id="DEADZONE_X_VAL" class="text-center one column">0</span>
                    <input type="range" oninput="tabBasic.basicSliderChanged(event)" onchange="tabBasic.basicSliderChanged(event)"
                           id="DEADZONE_X" min="0" max="650" class="eleven columns">
                </div>
                <label for="DEADZONE_Y">Vertical Deadzone:</label>
                <div class="row">
                    <span id="DEADZONE_Y_VAL" class="text-center one column">0</span>
                    <input type="range" oninput="tabBasic.basicSliderChanged(event)" onchange="tabBasic.basicSliderChanged(event)"
                           id="DEADZONE_Y" min="0" max="650" class="eleven columns">
                </div>
            </div>


            <br/>
            <br/>
            <div class="row">
                <button id="basic-button" onclick="actionAndToggle(flip.save, [], ['#basic-button-normal', '#basic-button-saving'], '#save-basic-value-bar')" class="one-third" style="position: relative;">
                    <div id="save-basic-value-bar" class="value-bar color-lightercyan" style="width: 0%;"></div>
                    <div id="basic-button-normal" i18n>Save // Speichern</div>
                    <div id="basic-button-saving" style="display: none;" i18n>Saving... // Wird
                        gespeichert...
                    </div>
                </button>
            </div>
        </div>
        <div data-tabs-pane class="tabs-pane" id="tabPuff">
            <div tabindex="-1">
                <h2 i18n style="display: none" aria-hidden="false" i18n>Tab 2 - FlipMouse Sip and Puff Configuration // Tab 2 - FlipMouse Konfiguration Saug-/Blassteuerung</h2>
            </div>
            <div id="tab-puff-container" class="relative">
                <div class="row back-layer full-height full-width">
                    <div aria-hidden="true" class="two columns"><span style="font-size: 1px; color: transparent">_</span></div>
                    <div class="ten columns full-height relative">
                        <div id="guide-current" class="back-layer full-height border-right-gray"
                             style="width: 50%;"></div>
                        <div id="guide-max" class="back-layer full-height border-right-red" style="width: 50%;"></div>
                        <div id="guide-min" class="back-layer full-height border-right-blue" style="width: 50%;"></div>
                    </div>
                </div>

                <br/>
                <label for="SIP_THRESHOLD" i18n>Sip Threshold: // Schwellenwert Saugen:</label>
                <div id="SIP_THRESHOLD_WRAPPER" class="row">
                    <span aria-hidden="true" id="SIP_THRESHOLD_VAL" class="text-center two columns">0</span>
                    <input type="range" oninput="tabSip.sipSliderChanged(this)" onchange="tabSip.sipSliderChanged(this)"
                           id="SIP_THRESHOLD" min="0" max="1023" class="ten columns"/>
                </div>
                <label for="SIP_STRONG_THRESHOLD" i18n>Strong Sip Threshold: // Schwellenwert Saugen
                    stark:</label>
                <div id="SIP_STRONG_THRESHOLD_WRAPPER" class="row">
                    <span aria-hidden="true" id="SIP_STRONG_THRESHOLD_VAL" class="text-center two columns">0</span>
                    <input type="range" oninput="tabSip.sipSliderChanged(this)" onchange="tabSip.sipSliderChanged(this)"
                           id="SIP_STRONG_THRESHOLD" min="0" max="1023" class="ten columns"/>
                </div>

                <br/>
                <label aria-hidden="true" for="value-bar-wrapper" i18n>Live values: // Aktuelle Werte:</label>
                <span type="range" disabled class="hidden" aria-hidden="false" i18n>Current pressure value // Aktueller Wert Druck</span>
                <input type="range" id="value-bar-slider" disabled class="hidden" aria-hidden="false"/>
                <div class="row">
                    <div aria-hidden="true" id="value-bar-wrapper" class="text-center two columns">
                        <span i18n>current: // aktuell:</span><span id="currentValue">0</span>,
                        <span>max:</span><span id="maxValue">0</span>,
                        <span>min:</span><span id="minValue">-1</span>
                    </div>
                    <div class="ten columns"
                         style="position:relative; height: 2em; border-style: solid; border-width: thin; background-color: transparent">
                        <div id="sippuff-value-bar" class="value-bar" style="width: 50%;"></div>
                    </div>
                </div>

                <br/>
                <br/>
                <label for="PUFF_THRESHOLD" i18n>Puff Threshold: // Schwellenwert Blasen:</label>
                <div id="PUFF_THRESHOLD_WRAPPER" class="row">
                    <span aria-hidden="true" id="PUFF_THRESHOLD_VAL" class="text-center two columns">0</span>
                    <input type="range" oninput="tabSip.sipSliderChanged(this)" onchange="tabSip.sipSliderChanged(this)"
                           id="PUFF_THRESHOLD" min="0" max="1023" class="ten columns">
                </div>
                <label for="PUFF_STRONG_THRESHOLD" i18n>Strong Puff Threshold: // Schwellenwert Blasen
                    stark:</label>
                <div id="PUFF_STRONG_THRESHOLD_WRAPPER" class="row">
                    <span aria-hidden="true" id="PUFF_STRONG_THRESHOLD_VAL" class="text-center two columns">0</span>
                    <input type="range" oninput="tabSip.sipSliderChanged(this)" onchange="tabSip.sipSliderChanged(this)"
                           id="PUFF_STRONG_THRESHOLD" min="0" max="1023" class="ten columns">
                </div>
            </div>

            <br/>
            <br/>
            <button id="sip-puff-button" onclick="actionAndToggle(flip.save, [], ['#sip-puff-button-normal', '#sip-puff-button-saving'], '#save-sip-value-bar')" class="u-full-width" style="position: relative;">
                <div id="save-sip-value-bar" class="value-bar color-lightercyan" style="width: 0%;"></div>
                <div id="sip-puff-button-normal" style="position: relative" i18n>Save // Speichern</div>
                <div id="sip-puff-button-saving" style="display: none" i18n>Saving... // Wird
                    gespeichert...
                </div>
            </button>
        </div>
        <div data-tabs-pane class="tabs-pane" id="tabSlots">
            <div tabindex="-1">
                <h2 i18n style="display: none" aria-hidden="false" i18n>Tab 3 - FlipMouse Slot configuration // Tab 3 - FlipMouse Slot Konfiguration</h2>
            </div>
            <div class="row">
                <label for="selectSlots2" i18n>Select active slot // Aktiven Slot auswählen</label>
                <select id="selectSlots2" class="slot-select u-full-width" onchange="tabSlot.selectSlot(this)">
                </select>
            </div>

            <br/>
            <div class="row">
                <label for="newSlotLabel" i18n>Create new slot // Neuen Slot anlegen</label>
                <div i18n class="u-full-width">
                    <input id="newSlotLabel" oninput="tabSlot.saveSlotLabelChanged(this)" type="text" class="u-full-width" placeholder="<insert name for new slot>" maxlength="15"/>
                    <input id="newSlotLabel" oninput="tabSlot.saveSlotLabelChanged(this)" type="text" class="u-full-width" placeholder="<Name für neuen Slot eingeben>" maxlength="15"/>
                </div>
                <button id="create-slot-button" disabled onclick="tabSlot.createSlot(['#create-slot-button-normal', '#create-slot-button-saving'], '#create-slot-value-bar')" class="u-full-width" style="position: relative;">
                    <div id="create-slot-value-bar" class="value-bar color-lightercyan" style="width: 0%;"></div>
                    <div id="create-slot-button-normal" style="position: relative" i18n>Create Slot // Slot anlegen</div>
                    <div id="create-slot-button-saving" style="display: none" i18n>creating slot... // Slot wird anlgelegt...</div>
                </button>
            </div>

            <br/>
            <div class="row">
                <label for="selectSlotDelete" i18n>Delete Slot // Slot löschen</label>
                <select id="selectSlotDelete" class="slot-select u-full-width">
                </select>
                <button id="delete-slot-button" onclick="tabSlot.deleteSlot(['#delete-slot-button-normal', '#delete-slot-button-saving'], '#delete-slot-value-bar')" class="u-full-width" style="position: relative;">
                    <div id="delete-slot-value-bar" class="value-bar color-lightercyan" style="width: 0%;"></div>
                    <div id="delete-slot-button-normal" style="position: relative" i18n>Delete Slot // Slot löschen</div>
                    <div id="delete-slot-button-saving" style="display: none" i18n>deleting slot... // Slot wird gelöscht...</div>
                </button>
            </div>

            <br/>
            <div class="row">
                <label for="selectSlotDelete" i18n>Reset to default configuration // Rücksetzen auf Defaulteinstellungen</label>
                <button id="reset-slot-button" onclick="tabSlot.resetConfig(['#reset-slot-button-normal', '#reset-slot-button-saving'], '#reset-slot-value-bar')" class="u-full-width" style="position: relative;">
                    <div id="reset-slot-value-bar" class="value-bar color-lightercyan" style="width: 0%;"></div>
                    <div id="reset-slot-button-normal" style="position: relative" i18n>Reset // Zurücksetzen</div>
                    <div id="reset-slot-button-saving" style="display: none" i18n>Resetting... // Wird zurückgesetzt...</div>
                </button>
            </div>
        </div>
        <div data-tabs-pane class="tabs-pane" id="tabActions">
            <div tabindex="-1">
                <h2 i18n style="display: none" aria-hidden="false" i18n>Tab 4 - FlipMouse Action configuration // Tab 4 - FlipMouse Konfiguration Aktionen</h2>
            </div>
            <label for="modeSelection" i18n>FlipMouse mode // FlipMouse Modus</label>
            <a id="hideModeHelpTextA" i18n style="display: none" href="javascript:L.toggleInline('#showModeHelpTextA', '#hideModeHelpTextA');L.toggle('#modeHelpText');">hide info // verstecke Info</a>    <a id="showModeHelpTextA" i18n href="javascript:L.toggleInline('#showModeHelpTextA', '#hideModeHelpTextA');L.toggle('#modeHelpText');">show info // zeige Info</a>
            <div i18n id="modeHelpText" class="space-bottom" style="display: none">
                <span>Select the mode of the FLipMouse. In "Mouse" Mode the stick is used to move the mouse, in "Alternative" mode the stick can be used to trigger custom actions.</span>
                <span>Wähle den FLipMouse Modus. Im "Maus" Modus bewegt der Stick die Maus, im "Alternative" Modus kann der Stick verwendet werden um benutzerdefinierte Aktionen auszulösen.</span>
            </div>
            <div id="modeSelection" class="row space-bottom">
                <button id="MODE_MOUSE" aria-selected="false" class="six columns modeButton" onclick="tabAction.selectMode(this)" i18n>Mouse // Maus</button>
                <button id="MODE_ALTERNATIVE" aria-selected="false" class="six columns modeButton" onclick="tabAction.selectMode(this)" i18n>Alternative // Alternativ</button>
            </div>
            <label i18n>Change actions // Aktionen ändern</label>
            <div class="row">
                <label class="three columns text-right text-normal" for="selectActionButton" i18n>Action to define // Zu belegende Funktion</label>
                <select id="selectActionButton" class="five columns" onchange="tabAction.selectActionButton(this.value)">
                </select>
                <div class="four columns">
                    <span id="currentActionLabel" class="hide-tablet-inline" i18n>Current action: // Aktuelle Aktion:</span>
                    <span id="currentAction" class="hide-mobile-inline"/>
                </div>
            </div>
            <div class="row" style="margin: 0.5em 0 0.5em 0">
                <label class="three columns text-right text-normal" i18n>Action category // Aktions-Kategorie</label>
                <div class="eight columns">
                    <div class="hide-tablet">
                        <button id="LEARN_CAT_KEYBOARD" aria-selected="true" class="three columns learnCatButton selected" onclick="tabAction.selectActionCategory(this)" i18n>Keyboard // Tastatur</button>
                        <button id="LEARN_CAT_MOUSE" aria-selected="false" class="three columns learnCatButton" onclick="tabAction.selectActionCategory(this)" i18n>Mouse // Maus</button>
                        <button id="LEARN_CAT_FLIPACTIONS" aria-selected="false" class="three columns learnCatButton" onclick="tabAction.selectActionCategory(this)">Flip</button>
                        <button id="LEARN_CAT_CUSTOM" aria-selected="false" class="three columns learnCatButton" onclick="tabAction.selectActionCategory(this)" i18n>Custom // Andere</button>
                    </div>
                    <div class="show-tablet-inline">
                        <button id="LEARN_CAT_KEYBOARD" aria-selected="true" class="three columns learnCatButton selected" onclick="tabAction.selectActionCategory(this)" i18n>Keyboard // Tastatur</button>
                        <button id="LEARN_CAT_MOUSE" aria-selected="false" class="three columns learnCatButton" onclick="tabAction.selectActionCategory(this)" i18n>Mouse // Maus</button>
                    </div>
                    <div class="show-tablet-inline">
                        <button id="LEARN_CAT_FLIPACTIONS" aria-selected="false" class="three columns learnCatButton" onclick="tabAction.selectActionCategory(this)">Flip</button>
                        <button id="LEARN_CAT_CUSTOM" aria-selected="false" class="three columns learnCatButton" onclick="tabAction.selectActionCategory(this)" i18n>Custom // Andere</button>
                    </div>
                </div>
            </div>
            <div id="WRAPPER_LEARN_CAT_KEYBOARD">
                <div class="row">
                    <label class="three columns text-right text-normal" for="INPUT_LEARN_CAT_KEYBOARD" i18n>Action Input // Eingabe Aktion</label>
                    <input type="text" id="INPUT_LEARN_CAT_KEYBOARD" class="six columns" onkeydown="tabAction.handleKeyBoardEvent(event)" oninput="tabAction.handleOnKeyboardInput(event)" autocomplete="off"/>
                   <button onclick="tabAction.resetRec()" class="two columns" i18n>Reset // Löschen</button>
                </div>
                <div class="row">
                    <label class="three columns text-right text-normal"i18n>Special Keys // Spezialtasten</label>
                    <div class="eight columns">
                        <button class="special-key" i18n onclick="tabAction.addSpecialKey(C.JS_KEYCODE_CTRL)">Ctrl // Strg</button>
                        <button class="special-key" onclick="tabAction.addSpecialKey(C.JS_KEYCODE_ALT)">Alt</button>
                        <button class="special-key" onclick="tabAction.addSpecialKey(C.JS_KEYCODE_SHIFT)">Shift</button>
                        <button class="special-key" onclick="tabAction.addSpecialKey(C.JS_KEYCODE_GUI)">Win</button>
                        <button class="special-key" onclick="tabAction.addSpecialKey(C.JS_KEYCODE_TAB)">Tab</button>
                        <select aria-hidden="true" id="SELECT_LEARN_CAT_KEYBOARD_SPECIAL" onchange="tabAction.addSpecialKey(this.value)">
                        </select>
                    </div>
                </div>
                <div class="row">
                    <label class="three columns text-right text-normal" i18n>Recorded AT Command // Aufgenommenes AT Kommando</label>
                    <div id="recordedAtCmd" class="six columns space-bottom" i18n>(none) // (leer)</div>
                    <button id="buttonRecOK" onclick="tabAction.saveRec()" disabled class="two columns">OK</button>
                </div>
            </div>
            <div id="WRAPPER_LEARN_CAT_MOUSE" class="row" style="display: none">
                <label class="three columns text-right text-normal" for="SELECT_LEARN_CAT_MOUSE" i18n>Action // Aktion</label>
                <select id="SELECT_LEARN_CAT_MOUSE" class="eight columns" onchange="tabAction.selectAtCmd(this.value)">
                </select>
            </div>
            <div id="WRAPPER_LEARN_CAT_FLIPACTIONS" class="row" style="display: none">
                <label class="three columns text-right text-normal" for="SELECT_LEARN_CAT_FLIPACTIONS" i18n>Action // Aktion</label>
                <select id="SELECT_LEARN_CAT_FLIPACTIONS" class="eight columns" onchange="tabAction.selectAtCmd(this.value)">
                </select>
            </div>
            <div id="WRAPPER_LEARN_CAT_CUSTOM" class="row" style="display: none">
                <label class="three columns text-right text-normal" for="INPUT_LEARN_CAT_CUSTOM" i18n>AT command // AT Kommando</label>
                <input type="text" id="INPUT_LEARN_CAT_CUSTOM" class="six columns">
                </input>
                <button class="two columns" onclick="tabAction.selectAtCmd(L('#INPUT_LEARN_CAT_CUSTOM').value)">OK</button>
            </div>
            <div id="WRAPPER_ADDITIONAL_FIELD_TEXT" class="row" style="display: none">
                <label class="three columns text-right text-normal" for="ADDITIONAL_FIELD_TEXT" i18n>AT command // AT Kommando</label>
                <input type="text" id="ADDITIONAL_FIELD_TEXT" class="six columns">
                </input>
                <button class="two columns" onclick="tabAction.setAtCmdWithAdditionalData(L('#ADDITIONAL_FIELD_TEXT').value)">OK</button>
            </div>
            <div id="WRAPPER_ADDITIONAL_FIELD_SELECT" class="row" style="display: none">
                <label class="three columns text-right text-normal" for="ADDITIONAL_FIELD_SELECT" i18n></label>
                <select id="ADDITIONAL_FIELD_SELECT" class="six columns">
                </select>
                <button class="two columns" onclick="tabAction.setAtCmdWithAdditionalData(L('#ADDITIONAL_FIELD_SELECT').value)">OK</button>
            </div>


            <br/>
            <label i18n>Current saved mapping // Aktuelle gespeicherte Konfiguration</label>
            <div id="currentConfigTh" class="hide-mobile row thead" aria-hidden="true">
                <div class="two columns" i18n>Description // Bezeichnung</div>
                <div class="four columns" i18n>Current action // aktuelle Aktion</div>
                <div class="four columns" i18n>Current AT command // aktuelles AT Kommando</div>
            </div>
            <ol id="currentConfigTb" class="tbody"></ol>

            <br/>
            <button id="save-action" onclick="actionAndToggle(flip.save, [], ['#save-action-button-normal', '#save-action-button-saving'], '#save-action-value-bar').then(function() {tabAction.init()})" class="u-full-width" style="position: relative;">
                <div id="save-action-value-bar" class="value-bar color-lightercyan" style="width: 0%;"></div>
                <div id="save-action-button-normal" style="position: relative" i18n>Save // Speichern</div>
                <div id="save-action-button-saving" style="display: none" i18n>Saving... // Wird
                    gespeichert...
                </div>
            </button>
        </div>
    </div>
</div>

<script>
    window.onload = function () {
        tabby.init();
        domI18n({
            selector: '[i18n]',
            separator: ' // ',
            languages: ['en', 'de']
        });
        L.loadScript('js/i18n/i18n_' + L.getLang() + '.js', 'js/i18n/i18n_en.js').then(function () {
            window.flip = new FlipMouse(function (config) {
                initWithConfig(config);
                tabSlot.initSlots();
                toTab(getCurrentTabId(), true);
                testConnection();
                setInterval(function () {
                    testConnection();
                }, 10000);
                function testConnection() {
                    flip.testConnection(true).then(function (isConnected) {
                        L.setVisible('.connectedIndicator', isConnected);
                        L.setVisible('.disconnectedIndicator', !isConnected);
                    });
                }
            });
        });
    };

    function initWithConfig(config) {
        console.log('applying config:');
        console.log(config);
        if(!config) {
            return;
        }
        setSliderValue(flip.SENSITIVITY_X, config[flip.SENSITIVITY_X]);
        setSliderValue(flip.SENSITIVITY_Y, config[flip.SENSITIVITY_Y]);
        setSliderValue('SENSITIVITY', config[flip.SENSITIVITY_X]);
        setSliderValue(flip.DEADZONE_X, config[flip.DEADZONE_X]);
        setSliderValue(flip.DEADZONE_Y, config[flip.DEADZONE_Y]);
        setSliderValue('DEADZONE', config[flip.DEADZONE_X]);
        setSliderValue(flip.SIP_THRESHOLD, config[flip.SIP_THRESHOLD]);
        setSliderValue(flip.SIP_STRONG_THRESHOLD, config[flip.SIP_STRONG_THRESHOLD]);
        setSliderValue(flip.PUFF_THRESHOLD, config[flip.PUFF_THRESHOLD]);
        setSliderValue(flip.PUFF_STRONG_THRESHOLD, config[flip.PUFF_STRONG_THRESHOLD]);

        if (config[flip.SENSITIVITY_X] != config[flip.SENSITIVITY_Y]) {
            tabBasic.toggleShowXY('SENSITIVITY');
        }
        if (config[flip.DEADZONE_X] != config[flip.DEADZONE_Y]) {
            tabBasic.toggleShowXY('DEADZONE');
        }
    }

    function setSliderValue(constant, value, dontSetSlider) {
        L('#' + constant + '_VAL').innerHTML = value;
        if (!dontSetSlider) {
            L('#' + constant).value = value;
        }
    }

    function actionAndToggle(actionFunction, argList, toggleElementList, progressBarId) {
        return new Promise(function (resolve) {
            var maxProgress = 0;
            var stopProgressBar = false;
            argList = argList || [];
            L.toggle.apply(null, toggleElementList);
            var promise = actionFunction.apply(null, argList.concat(progressHandler));
            if (promise && promise.then) {
                promise.then(function () {
                    if (progressBarId) {
                        progressHandler(100, 100);
                        setTimeout(function () {
                            stopProgressBar = true;
                            L(progressBarId).style = 'width: 0%;';
                        }, 500);
                    }
                    L.toggle.apply(null, toggleElementList);
                    resolve();
                }, function () {
                    stopProgressBar = true;
                });
            }

            function progressHandler(progress, timeConstant) {
                var startTime = L.getMs();
                timeConstant = timeConstant || 1000;
                if (progressBarId) {
                    updateProgressBar(maxProgress);
                }

                function updateProgressBar(oldPrg) {
                    setTimeout(function () {
                        var t = L.getMs() - startTime;
                        var p = (progress - oldPrg) * (1 - Math.exp(-t / timeConstant)) + oldPrg;
                        if (p > maxProgress && !stopProgressBar) {
                            maxProgress = p;
                            L(progressBarId).style = 'width: ' + p + '%;';
                            updateProgressBar(oldPrg);
                        }
                    }, 50);
                }
            }
        });
    }

    function toTab(tabId, nofocus) {
        tabId = parseTabId(tabId);
        if(!tabId) {
            tabId = '#tabBasic';
        }
        if(nofocus) {
            L(tabId).setAttribute('data-tab-no-focus', true);
        }
        tabby.toggleTab(tabId);
        if(nofocus) {
            L(tabId).removeAttribute('data-tab-no-focus');
        }
        L.setSelected('.menubutton', false);
        L.setSelected(tabId + 'Btn');
        L.setVisible('#toNavLink');
        L.setVisible('#toNavBackLink', false);
        if (tabId.indexOf('#tabBasic') > -1) {
            toBasic();
        } else if (tabId.indexOf('#tabPuff') > -1) {
            toSipPuff();
        } else if (tabId.indexOf('#tabSlots') > -1) {
            toSlots();
        } else if (tabId.indexOf('#tabActions') > -1) {
            toActions();
        } else if (tabId.indexOf('#tabNav') > -1) {
            toNav();
        }
    }
    
    function toBasic() {
        flip.startLiveValueListener(tabBasic.cursorPosValueHandler);
    }

    function toSipPuff() {
        flip.startLiveValueListener(tabSip.sipPuffValueHandler);
    }

    function toSlots() {
        flip.stopLiveValueListener();
    }

    function toActions() {
        flip.stopLiveValueListener();
        tabAction.init();
    }

    function toNav() {
        tabby.toggleTab('#tabNav');
        L.toggle('#toNavLink', '#toNavBackLink');
        window.lastNav = getCurrentTabId();

        var tabNav = L('#tabNavContainer');
        if(tabNav.hasChildNodes()) {
            return;
        }
        var navItems = L('#tabMenu').children;
        for (var i = 0; i < navItems.length-2; i++) {
            var clone = navItems[i].cloneNode(true);
            clone.className = '';
            tabNav.appendChild(clone);
        }
    }

    function toNavBack() {
        L.toggle('#toNavLink', '#toNavBackLink');
        if(window.lastNav && window.lastNav != '#tabNav') {
            toTab(window.lastNav);
        } else {
            toTab('#tabBasic');
        }
    }

    function getCurrentTabId() {
        if(L('.tabs-pane.active')[0]) {
            var id = parseTabId(L('.tabs-pane.active')[0].baseURI);
        }
        return id ? id : parseTabId(window.location.href);
    }

    function parseTabId(url) {
        return url.indexOf('#') > -1 ? url.substring(url.indexOf('#')) : '';
    }
</script>
</body>
</html>
